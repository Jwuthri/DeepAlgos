# -*- coding: utf-8 -*-"""@author: JulienWuthrich"""import face_recognitionimport cv2import globimport osimport pickleimport multiprocessing as mpimport matplotlib.patches as patchesimport matplotlib.pyplot as pltclass FaceEncoding(object):    def __init__(self, plot=False, jobs=1):        """"""        self.lencodings = list()        self.lnames = list()        self.plot = plot        self.jobs = jobs        self.data = dict()    def show(self, rgb, face_boxes):        """        :param rgb:        :param face_boxes:        :return:        """        if self.plot:            xy = (face_boxes[0][-1], face_boxes[0][0])            width = face_boxes[0][1] - face_boxes[0][-1]            height = face_boxes[0][2] - face_boxes[0][0]            fig,ax = plt.subplots(1)            ax.imshow(rgb)            rect = patches.Rectangle(xy, width, height, linewidth=2, edgecolor='b', facecolor='none')            ax.add_patch(rect)            plt.show()    def save_model(self, path="../models/enc.pickle"):        """        :param data:        :param path:        :return:        """        f = open(path, "wb")        f.write(pickle.dumps(self.data))        f.close()    def _face_encoding(self, file):        """        :param file:        :return:        """        name = file.split(os.path.sep)[-2]  # the name should be in the path        image = cv2.imread(file)        rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)        face_boxes = face_recognition.face_locations(rgb, model="hog")        if len(face_boxes) == 0:            face_boxes = face_recognition.face_locations(rgb, model="cnn")        self.show(rgb, face_boxes)        encodings = face_recognition.face_encodings(rgb, face_boxes)        for encoding in encodings:            self.lencodings.append(encoding)            self.lnames.append(name)    def faces_encoding(self, files, save_model=False):        """Build face encoder.        :param files: (list) paths of the images        :param save_model:        :return: (dict) {"encodings": lencodings, "names": lnames}        """        if self.jobs == 1:            map(self._face_encoding, files)        else:            pool = mp.Pool(self.jobs)            pool.map(self._face_encoding, files)        self.data = {"encodings": self.lencodings, "names": self.lnames}        if save_model:            self.save_model()if __name__ == '__main__':    paths = glob.glob("../../../data/raw/face_recognition/*/*", recursive=True)    fe = FaceEncoding()    fe.faces_encoding(save_model=True)